name: 'Detect-and-Burn-in Reusable'

on:
  workflow_call:
    outputs:
      runE2E:
        description: 'Whether to run E2E tests'
        value: ${{ jobs.detect-changes.outputs.runE2E }}
    inputs:
      base-ref:
        type: string
        description: 'Base ref to compare changed files with HEAD'
        required: false
        default: 'main'

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      runE2E: ${{ steps.set-runE2E.outputs.runE2E }}
      shouldBurnIn: ${{ steps.detect-changed.outputs.shouldBurnIn }}

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Detect changed E2E test files
        id: detect-changed
        run: |
          # Fetch base branch explicitly
          git remote set-branches --add origin ${{ inputs.base-ref }}
          git fetch origin ${{ inputs.base-ref }}
          changed_files=$(git diff --name-only origin/${{ inputs.base-ref }} HEAD)

          echo "Changed files:"
          echo "$changed_files"

          if echo "$changed_files" | grep -Eq '^pw/.*\.(spec|test)\.ts'; then
            echo "shouldBurnIn=true" >> $GITHUB_OUTPUT
            echo "Found test file changes => will run burn-in"
          else
            echo "shouldBurnIn=false" >> $GITHUB_OUTPUT
            echo "No test file changes => will skip burn-in"
          fi

      - name: Set runE2E output
        id: set-runE2E
        run: |
          if [ "${{ steps.detect-changed.outputs.shouldBurnIn }}" = "false" ]; then
            echo "runE2E=true" >> $GITHUB_OUTPUT
            echo "No E2E test files changed => skipping burn-in, but E2E can still proceed."
          else
            echo "runE2E=true" >> $GITHUB_OUTPUT
            echo "Test files changed => will run burn-in, E2E depends on its outcome"
          fi

  burn-in:
    needs: detect-changes
    if: needs.detect-changes.outputs.shouldBurnIn == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Read Node version from .nvmrc
        run: echo "NODE_VERSION=$(cat .nvmrc)" >> $GITHUB_ENV

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright (Chromium only)
        run: npx playwright install chromium

      - name: Run Burn-in
        id: burn-in-step
        run: |
          # Create a local branch tracking origin/base-ref
          git branch -f ${{ inputs.base-ref }} origin/${{ inputs.base-ref }}

          npx playwright test \
            --only-changed=${{ inputs.base-ref }} \
            --repeat-each=10 \
            --retries=0

      - name: Update runE2E based on burn-in result
        if: always()
        run: |
          if [ "${{ steps.burn-in-step.outcome }}" = "success" ]; then
            echo "runE2E=true" >> $GITHUB_OUTPUT
            echo "Burn-in passed => E2E can proceed"
          else
            echo "runE2E=false" >> $GITHUB_OUTPUT
            echo "Burn-in failed => E2E will be skipped"
          fi
