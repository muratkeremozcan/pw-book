name: 'Detect-and-Burn-in Reusable'

on:
  workflow_call:
    outputs:
      runE2E:
        description: 'Whether to run E2E tests'
        value: ${{ jobs.detect-changes.outputs.runE2E }}
    inputs:
      base-ref:
        type: string
        description: 'Base ref to compare changed files with HEAD'
        default: 'main'
      test-directory:
        type: string
        description: 'Directory containing test files'
        default: 'pw/'
      test-pattern:
        type: string
        description: 'Regex pattern to match test files'
        default: '.*\.(spec|test)\.ts'
      repeat-count:
        type: number
        description: 'Number of times to repeat each test'
        default: 10
      retry-count:
        type: number
        description: 'Number of test retries'
        default: 0
      install-command:
        type: string
        description: 'Dependency install command'
        default: 'npm ci'
      playwright-browsers:
        type: string
        description: 'Browsers to install (comma-separated)'
        default: 'chromium'
      test-command:
        type: string
        description: 'Command to run tests'
        default: 'npx playwright test'
      node-version-file:
        type: string
        description: 'Path to file containing Node version'
        default: '.nvmrc'

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      runE2E: ${{ steps.set-runE2E.outputs.runE2E }}
      shouldBurnIn: ${{ steps.detect-changed.outputs.shouldBurnIn }}

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Detect changed E2E test files
        id: detect-changed
        run: |
          git remote set-branches --add origin ${{ inputs.base-ref }}
          git fetch origin ${{ inputs.base-ref }}
          changed_files=$(git diff --name-only origin/${{ inputs.base-ref }} HEAD)

          echo "Changed files:"
          echo "$changed_files"

          if echo "$changed_files" | grep -Eq '^${{ inputs.test-directory }}.*${{ inputs.test-pattern }}'; then
            echo "shouldBurnIn=true" >> $GITHUB_OUTPUT
            echo "Found test file changes => will run burn-in"
          else
            echo "shouldBurnIn=false" >> $GITHUB_OUTPUT
            echo "No test file changes => will skip burn-in"
          fi

      # ... rest of detect-changes job remains the same ...

  burn-in-rwf:
    needs: detect-changes
    if: needs.detect-changes.outputs.shouldBurnIn == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Read Node version
        run: echo "NODE_VERSION=$(cat ${{ inputs.node-version-file }})" >> $GITHUB_ENV

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: ${{ inputs.install-command }}

      - name: Install Playwright browsers
        run: npx playwright install ${{ inputs.playwright-browsers }}

      - name: Run Burn-in
        id: burn-in-step
        run: |
          git branch -f ${{ inputs.base-ref }} origin/${{ inputs.base-ref }}
          ${{ inputs.test-command }} \
            --only-changed=${{ inputs.base-ref }} \
            --repeat-each=${{ inputs.repeat-count }} \
            --retries=${{ inputs.retry-count }}

      - name: Update runE2E based on burn-in result
        if: always()
        run: |
          if [ "${{ steps.burn-in-step.outcome }}" = "success" ]; then
            echo "runE2E=true" >> $GITHUB_OUTPUT
            echo "Burn-in passed => E2E can proceed"
          else
            echo "runE2E=false" >> $GITHUB_OUTPUT
            echo "Burn-in failed => E2E will be skipped"
          fi
